{"ast":null,"code":"import headers from './headers';\nimport { formatBodyUrlEncoded } from '../../utils/format';\nimport { clientID, clientSecret, autenticationUrl, urlAPI } from '../../constants/api-constants';\nconst api = {\n  autentication: {\n    getToken() {\n      var details = {\n        'grant_type': 'client_credentials',\n        'client_id': clientID,\n        'client_secret': clientSecret\n      };\n      const url = `${autenticationUrl}/token`;\n      headers.post_urlencoded.body = formatBodyUrlEncoded(details);\n      return fetch(url, headers.post_urlencoded);\n    }\n  },\n  tracks: {\n    newReleases(token) {\n      const url = `${urlAPI}/token`;\n      headers.get.headers.authorization = `Bearer ${token}`;\n      return fetch(url, headers.get);\n    }\n  },\n  albums: {\n    getAlbums(token, ids) {\n      const url = `${urlAPI}/albums?ids=${ids}`;\n      headers.get.headers.authorization = `Bearer ${token}`;\n      return fetch(url, headers.get);\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["headers","formatBodyUrlEncoded","clientID","clientSecret","autenticationUrl","urlAPI","api","autentication","getToken","details","url","post_urlencoded","body","fetch","tracks","newReleases","token","get","authorization","albums","getAlbums","ids"],"sources":["C:/Users/Admin/Documents/git/Dinametra/dashboard-dimitra/src/services/api/api.js"],"sourcesContent":["import headers from './headers';\r\nimport { formatBodyUrlEncoded } from '../../utils/format';\r\nimport {\r\n    clientID,\r\n    clientSecret,\r\n    autenticationUrl,\r\n    urlAPI\r\n} from '../../constants/api-constants';\r\n\r\nconst api = {\r\n    autentication: {\r\n        getToken() {\r\n            var details = {\r\n                'grant_type': 'client_credentials',\r\n                'client_id': clientID,\r\n                'client_secret': clientSecret\r\n            };\r\n            const url = `${autenticationUrl}/token`;\r\n            headers.post_urlencoded.body = formatBodyUrlEncoded(details);\r\n            return fetch(url, headers.post_urlencoded);\r\n        }\r\n    },\r\n    tracks: {\r\n        newReleases(token) {\r\n            const url = `${urlAPI}/token`;\r\n            headers.get.headers.authorization = `Bearer ${token}`;\r\n            return fetch(url, headers.get);\r\n        }\r\n    },\r\n    albums: {\r\n        getAlbums(token, ids) {\r\n            const url = `${urlAPI}/albums?ids=${ids}`;\r\n            headers.get.headers.authorization = `Bearer ${token}`;\r\n            return fetch(url, headers.get);\r\n        }\r\n    }\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,WAAW;AAC/B,SAASC,oBAAoB,QAAQ,oBAAoB;AACzD,SACIC,QAAQ,EACRC,YAAY,EACZC,gBAAgB,EAChBC,MAAM,QACH,+BAA+B;AAEtC,MAAMC,GAAG,GAAG;EACRC,aAAa,EAAE;IACXC,QAAQA,CAAA,EAAG;MACP,IAAIC,OAAO,GAAG;QACV,YAAY,EAAE,oBAAoB;QAClC,WAAW,EAAEP,QAAQ;QACrB,eAAe,EAAEC;MACrB,CAAC;MACD,MAAMO,GAAG,GAAG,GAAGN,gBAAgB,QAAQ;MACvCJ,OAAO,CAACW,eAAe,CAACC,IAAI,GAAGX,oBAAoB,CAACQ,OAAO,CAAC;MAC5D,OAAOI,KAAK,CAACH,GAAG,EAAEV,OAAO,CAACW,eAAe,CAAC;IAC9C;EACJ,CAAC;EACDG,MAAM,EAAE;IACJC,WAAWA,CAACC,KAAK,EAAE;MACf,MAAMN,GAAG,GAAG,GAAGL,MAAM,QAAQ;MAC7BL,OAAO,CAACiB,GAAG,CAACjB,OAAO,CAACkB,aAAa,GAAG,UAAUF,KAAK,EAAE;MACrD,OAAOH,KAAK,CAACH,GAAG,EAAEV,OAAO,CAACiB,GAAG,CAAC;IAClC;EACJ,CAAC;EACDE,MAAM,EAAE;IACJC,SAASA,CAACJ,KAAK,EAAEK,GAAG,EAAE;MAClB,MAAMX,GAAG,GAAG,GAAGL,MAAM,eAAegB,GAAG,EAAE;MACzCrB,OAAO,CAACiB,GAAG,CAACjB,OAAO,CAACkB,aAAa,GAAG,UAAUF,KAAK,EAAE;MACrD,OAAOH,KAAK,CAACH,GAAG,EAAEV,OAAO,CAACiB,GAAG,CAAC;IAClC;EACJ;AACJ,CAAC;AAED,eAAeX,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useContext, useCallback } from 'react';\nimport { setFilter, setState } from '../store/actions';\nimport DashboardContext from '../contexts/generalContext';\nimport { areAllPropertiesEmpty } from '../utils/helpers';\nexport default function useFilter() {\n  _s();\n  const [state, dispatch] = useContext(DashboardContext);\n  const {\n    filters,\n    metaCampaigns,\n    filterMetaCampains\n  } = state;\n  const setSearchType = useCallback((name, type) => dispatch(setFilter({\n    [type]: name\n  })), []);\n  const searchByFilters = useCallback(async () => {\n    if (areAllPropertiesEmpty(filters)) {\n      dispatch(setState({\n        filterMetaCampains: metaCampaigns\n      }));\n    } else {\n      dispatch(setState({\n        filterMetaCampains: metaCampaigns.filter(item => item.nombre.includes(filters.nombre))\n      }));\n    }\n  }, [filters, filterMetaCampains, metaCampaigns]);\n  return {\n    setSearchType,\n    searchByFilters\n  };\n}\n_s(useFilter, \"DK9faX7dWx5qrj+aOKbvfKUKPno=\");","map":{"version":3,"names":["useContext","useCallback","setFilter","setState","DashboardContext","areAllPropertiesEmpty","useFilter","_s","state","dispatch","filters","metaCampaigns","filterMetaCampains","setSearchType","name","type","searchByFilters","filter","item","nombre","includes"],"sources":["C:/Users/Admin/Documents/git/dashboard-admira/src/hooks/useFilterMetaAds.js"],"sourcesContent":["import { useContext, useCallback } from 'react';\r\nimport { setFilter, setState } from '../store/actions';\r\nimport DashboardContext from '../contexts/generalContext';\r\nimport { areAllPropertiesEmpty } from '../utils/helpers';\r\n\r\nexport default function useFilter(){\r\n    const [state, dispatch] = useContext(DashboardContext);\r\n    const { filters, metaCampaigns, filterMetaCampains } = state;\r\n    const setSearchType = useCallback((name, type) =>\r\n        dispatch(setFilter({[type]: name})), []);\r\n    \r\n    const searchByFilters = useCallback(async () => {\r\n            if(areAllPropertiesEmpty(filters)){\r\n                dispatch(setState({\r\n                    filterMetaCampains: metaCampaigns\r\n                }));\r\n            }else {\r\n                dispatch(setState({\r\n                    filterMetaCampains: metaCampaigns.filter(item => \r\n                        item.nombre.includes(filters.nombre))\r\n                }));\r\n            }\r\n    }, [filters, filterMetaCampains, metaCampaigns]);\r\n\r\n    return {\r\n        setSearchType,\r\n        searchByFilters\r\n    }\r\n}\r\n"],"mappings":";AAAA,SAASA,UAAU,EAAEC,WAAW,QAAQ,OAAO;AAC/C,SAASC,SAAS,EAAEC,QAAQ,QAAQ,kBAAkB;AACtD,OAAOC,gBAAgB,MAAM,4BAA4B;AACzD,SAASC,qBAAqB,QAAQ,kBAAkB;AAExD,eAAe,SAASC,SAASA,CAAA,EAAE;EAAAC,EAAA;EAC/B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,UAAU,CAACI,gBAAgB,CAAC;EACtD,MAAM;IAAEM,OAAO;IAAEC,aAAa;IAAEC;EAAmB,CAAC,GAAGJ,KAAK;EAC5D,MAAMK,aAAa,GAAGZ,WAAW,CAAC,CAACa,IAAI,EAAEC,IAAI,KACzCN,QAAQ,CAACP,SAAS,CAAC;IAAC,CAACa,IAAI,GAAGD;EAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;EAE5C,MAAME,eAAe,GAAGf,WAAW,CAAC,YAAY;IACxC,IAAGI,qBAAqB,CAACK,OAAO,CAAC,EAAC;MAC9BD,QAAQ,CAACN,QAAQ,CAAC;QACdS,kBAAkB,EAAED;MACxB,CAAC,CAAC,CAAC;IACP,CAAC,MAAK;MACFF,QAAQ,CAACN,QAAQ,CAAC;QACdS,kBAAkB,EAAED,aAAa,CAACM,MAAM,CAACC,IAAI,IACzCA,IAAI,CAACC,MAAM,CAACC,QAAQ,CAACV,OAAO,CAACS,MAAM,CAAC;MAC5C,CAAC,CAAC,CAAC;IACP;EACR,CAAC,EAAE,CAACT,OAAO,EAAEE,kBAAkB,EAAED,aAAa,CAAC,CAAC;EAEhD,OAAO;IACHE,aAAa;IACbG;EACJ,CAAC;AACL;AAACT,EAAA,CAvBuBD,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
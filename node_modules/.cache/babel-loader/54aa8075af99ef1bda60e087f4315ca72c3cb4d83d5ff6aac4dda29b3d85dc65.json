{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useMemo, useContext, useCallback, useEffect } from 'react';\nimport { campaignsData } from '../__mocks__/googleAdsMock';\nimport { setFilter, setState } from '../store/actions';\nimport DashboardContext from '../contexts/generalContext';\nexport default function useGoogleAds() {\n  _s();\n  const [state, dispatch] = useContext(DashboardContext);\n  const {\n    filters,\n    campaigns\n  } = state;\n  console.log(\"el Campaigns\", campaigns);\n  const costData = useMemo(() => {\n    const data = campaigns.reduce((acc, campaign) => {\n      const cost = campaign.costo;\n      if (cost <= 100) {\n        acc[\"<=100\"]++;\n      } else if (cost >= 101 && cost <= 250) {\n        acc[\"101-250\"]++;\n      } else if (cost >= 251 && cost <= 400) {\n        acc[\"251-400\"]++;\n      } else if (cost >= 401) {\n        acc[\"401+\"]++;\n      }\n      return acc;\n    }, {\n      \"<=100\": 0,\n      \"101-250\": 0,\n      \"251-400\": 0,\n      \"401+\": 0\n    });\n    let items = [];\n    Object.entries(data).forEach(([key, value]) => {\n      items.push({\n        value,\n        name: key\n      });\n    });\n    return {\n      title: {\n        text: 'Costo',\n        subtext: 'por campaña',\n        left: 'center'\n      },\n      tooltip: {\n        trigger: 'item'\n      },\n      legend: {\n        orient: 'vertical',\n        left: 'left'\n      },\n      series: [{\n        name: 'Costo',\n        type: 'pie',\n        radius: '50%',\n        data: items,\n        emphasis: {\n          itemStyle: {\n            shadowBlur: 10,\n            shadowOffsetX: 0,\n            shadowColor: 'rgba(0, 0, 0, 0.5)'\n          }\n        }\n      }]\n    };\n  }, [campaigns]);\n  const topCampaignsData = useMemo(() => {\n    const topCampaigns = campaigns.sort((a, b) => b.clics - a.clics).slice(0, 5);\n    console.log(\"el top\", topCampaigns);\n    return {\n      title: {\n        text: 'Visitas a la pagina'\n      },\n      tooltip: {},\n      xAxis: {\n        type: 'category',\n        data: googleAnaliticsMock.vistasPagina.map(item => item.fecha),\n        axisLabel: {\n          rotate: 90,\n          margin: 1\n        }\n      },\n      yAxis: {\n        type: 'value'\n      },\n      series: {\n        type: 'bar',\n        data: googleAnaliticsMock.vistasPagina.map(item => item.vistas)\n      }\n    };\n  }, [campaigns]);\n  useEffect(() => {\n    dispatch(setState({\n      campaigns: campaignsData.campanas\n    }));\n  }, []);\n  return {\n    costData,\n    topCampaignsData\n  };\n}\n_s(useGoogleAds, \"JzIdlMNO3nlxlpeKKHkD741NKWY=\");","map":{"version":3,"names":["useMemo","useContext","useCallback","useEffect","campaignsData","setFilter","setState","DashboardContext","useGoogleAds","_s","state","dispatch","filters","campaigns","console","log","costData","data","reduce","acc","campaign","cost","costo","items","Object","entries","forEach","key","value","push","name","title","text","subtext","left","tooltip","trigger","legend","orient","series","type","radius","emphasis","itemStyle","shadowBlur","shadowOffsetX","shadowColor","topCampaignsData","topCampaigns","sort","a","b","clics","slice","xAxis","googleAnaliticsMock","vistasPagina","map","item","fecha","axisLabel","rotate","margin","yAxis","vistas","campanas"],"sources":["C:/Users/Admin/Documents/git/dashboard-admira/src/hooks/useGoogleAds.js"],"sourcesContent":["import { useMemo, useContext, useCallback, useEffect } from 'react';\r\nimport { campaignsData } from '../__mocks__/googleAdsMock';\r\nimport { setFilter, setState } from '../store/actions';\r\nimport DashboardContext from '../contexts/generalContext';\r\n\r\nexport default function useGoogleAds() {\r\n    const [state, dispatch] = useContext(DashboardContext);\r\n    const { filters, campaigns } = state;\r\n    console.log(\"el Campaigns\", campaigns)\r\n    const costData = useMemo(() => {\r\n        const data = campaigns.reduce((acc, campaign) => {\r\n            const cost = campaign.costo;\r\n            if (cost <= 100) {\r\n                acc[\"<=100\"]++;\r\n            } else if (cost >= 101 && cost <= 250) {\r\n                acc[\"101-250\"]++;\r\n            } else if (cost >= 251 && cost <= 400) {\r\n                acc[\"251-400\"]++;\r\n            } else if (cost >= 401) {\r\n                acc[\"401+\"]++;\r\n            }\r\n    \r\n            return acc;\r\n        }, {\r\n            \"<=100\": 0,\r\n            \"101-250\": 0,\r\n            \"251-400\": 0,\r\n            \"401+\": 0\r\n        });\r\n        let items = [];\r\n        Object.entries(data).forEach(([key, value]) => {\r\n            items.push({\r\n                value,\r\n                name: key\r\n            });\r\n          })\r\n        return {\r\n            title: {\r\n                text: 'Costo',\r\n                subtext: 'por campaña',\r\n                left: 'center'\r\n              },\r\n              tooltip: {\r\n                trigger: 'item'\r\n              },\r\n              legend: {\r\n                orient: 'vertical',\r\n                left: 'left'\r\n              },\r\n              series: [\r\n                {\r\n                  name: 'Costo',\r\n                  type: 'pie',\r\n                  radius: '50%',\r\n                  data: items,\r\n                  emphasis: {\r\n                    itemStyle: {\r\n                      shadowBlur: 10,\r\n                      shadowOffsetX: 0,\r\n                      shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n                    }\r\n                  }\r\n                }\r\n              ]\r\n        }\r\n    }, [campaigns]);\r\n\r\n    const topCampaignsData = useMemo(() => {\r\n        const topCampaigns = campaigns\r\n        .sort((a, b) => b.clics - a.clics)  \r\n        .slice(0, 5);\r\n        console.log(\"el top\", topCampaigns)\r\n        return {\r\n            title: {\r\n                text: 'Visitas a la pagina'\r\n            },\r\n            tooltip: {},\r\n            xAxis: {\r\n                type: 'category',\r\n                data: googleAnaliticsMock.vistasPagina.map(item => item.fecha),\r\n                axisLabel: {\r\n                    rotate: 90,\r\n                    margin: 1\r\n                  }\r\n            },\r\n            yAxis: {\r\n                type: 'value'\r\n            },\r\n            series: {\r\n                type: 'bar',\r\n                data: googleAnaliticsMock.vistasPagina.map(item => item.vistas)\r\n            }\r\n        }\r\n    }, [campaigns]);\r\n\r\n    useEffect(() => {\r\n        dispatch(setState({\r\n            campaigns: campaignsData.campanas\r\n        }));\r\n    }, [])\r\n    return {\r\n        costData,\r\n        topCampaignsData\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}